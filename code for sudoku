# sudoku-in-python
This is GUI program for sudoku in python language.

__author__ = 'sudhanshu'
from Tkinter import *
import tkMessageBox
import math
import random
import  time
from itertools import count

"""def setvalue():
	val = random.randint(10,20)
	e.set(val)
def getvalue():
	print e.get()"""

sec=300

def start_counter(ent,val,top,label):
    counter = count(0)
    def update_func():

        label.config(text=str(300-counter.next())+" seconds remaining")
        label.after(1000, update_func)  # 1000ms

    update_func()


def maketimer(timer,timevalue):
    value = timer.getint()-1
    timevalue.set(value)



def insertblock(ent,val,row,col,value):


    if col in range(3):
        #print "in range 3"

        if row in range(2):
            check =[i for i in range(1,7)]
            #print "in range 2"

            for i in range(6):
                if ent[i][col].get()!='':
                    check = list(set(check)-set([int(ent[i][col].get())]))
            for i in range(6):
                if ent[row][i].get()!='':
                    check = list(set(check)-set([int(ent[row][i].get())]))
            if ent[0][0].get()!='':
                check = list(set(check)-set([int(ent[0][0].get())]))
            if ent[0][1].get()!='':
                check = list(set(check)-set([int(ent[0][1].get())]))
            if ent[0][2].get()!='':
                check = list(set(check)-set([int(ent[0][2].get())]))
            if ent[1][0].get()!='':
                check = list(set(check)-set([int(ent[1][0].get())]))
            if ent[1][1].get()!='':
                check = list(set(check)-set([int(ent[1][1].get())]))
            if ent[1][2].get()!='':
                check = list(set(check)-set([int(ent[1][2].get())]))
            if value not in check:
                value = check[0]
            val[row][col].set(value)

        if row in range(2,4):
            check =[i for i in range(1,7)]

            for i in range(6):
                if ent[i][col].get()!='':
                    check = list(set(check)-set([int(ent[i][col].get())]))
            for i in range(6):
                if ent[row][i].get()!='':
                    check = list(set(check)-set([int(ent[row][i].get())]))
            if ent[2][0].get()!='':
                check = list(set(check)-set([int(ent[2][0].get())]))
            if ent[2][1].get()!='':
                check = list(set(check)-set([int(ent[2][1].get())]))
            if ent[2][3].get()!='':
                check = list(set(check)-set([int(ent[2][2].get())]))
            if ent[3][0].get()!='':
                check = list(set(check)-set([int(ent[3][0].get())]))
            if ent[3][1].get()!='':
                check = list(set(check)-set([int(ent[3][1].get())]))
            if ent[3][2].get()!='':
                check = list(set(check)-set([int(ent[3][2].get())]))
            if value not in check:
                value = check[0]
            val[row][col].set(value)

        if row in range(4,6):
            check =[i for i in range(1,7)]

            for i in range(6):
                if ent[i][col].get()!='':
                    check = list(set(check)-set([int(ent[i][col].get())]))
            for i in range(6):
                if ent[row][i].get()!='':
                    check = list(set(check)-set([int(ent[row][i].get())]))
            if ent[4][0].get()!='':
                check = list(set(check)-set([int(ent[4][0].get())]))
            if ent[4][1].get()!='':
                check = list(set(check)-set([int(ent[4][1].get())]))
            if ent[4][2].get()!='':
                check = list(set(check)-set([int(ent[4][2].get())]))
            if ent[5][0].get()!='':
                check = list(set(check)-set([int(ent[5][0].get())]))
            if ent[5][1].get()!='':
                check = list(set(check)-set([int(ent[5][1].get())]))
            if ent[5][2].get()!='':
                check = list(set(check)-set([int(ent[5][2].get())]))
            if value not in check:
                value = check[0]
            val[row][col].set(value)

        return



    if col in range(3,6):

        if row in range(2):
            check =[i for i in range(1,7)]
            #print "in range 2"

            for i in range(6):
                if ent[i][col].get()!='':
                    check = list(set(check)-set([int(ent[i][col].get())]))
            for i in range(6):
                if ent[row][i].get()!='':
                    check = list(set(check)-set([int(ent[row][i].get())]))
            if ent[0][3].get()!='':
                check = list(set(check)-set([int(ent[0][3].get())]))
            if ent[0][4].get()!='':
                check = list(set(check)-set([int(ent[0][4].get())]))
            if ent[0][5].get()!='':
                check = list(set(check)-set([int(ent[0][5].get())]))
            if ent[1][3].get()!='':
                check = list(set(check)-set([int(ent[1][3].get())]))
            if ent[1][4].get()!='':
                check = list(set(check)-set([int(ent[1][4].get())]))
            if ent[1][5].get()!='':
                check = list(set(check)-set([int(ent[1][5].get())]))
            if value not in check:
                value = check[0]
            val[row][col].set(value)

        if row in range(2,4):
            check =[i for i in range(1,7)]

            for i in range(6):
                if ent[i][col].get()!='':
                    check = list(set(check)-set([int(ent[i][col].get())]))
            for i in range(6):
                if ent[row][i].get()!='':
                    check = list(set(check)-set([int(ent[row][i].get())]))
            if ent[2][3].get()!='':
                check = list(set(check)-set([int(ent[2][3].get())]))
            if ent[2][4].get()!='':
                check = list(set(check)-set([int(ent[2][4].get())]))
            if ent[2][5].get()!='':
                check = list(set(check)-set([int(ent[2][5].get())]))
            if ent[3][3].get()!='':
                check = list(set(check)-set([int(ent[3][3].get())]))
            if ent[3][4].get()!='':
                check = list(set(check)-set([int(ent[3][4].get())]))
            if ent[3][5].get()!='':
                check = list(set(check)-set([int(ent[3][5].get())]))
            if value not in check:
                value = check[0]
            val[row][col].set(value)

        if row in range(4,6):
            #print "called 46"
            check =[i for i in range(1,7)]

            for i in range(6):
                if ent[i][col].get()!='':
                    check = list(set(check)-set([int(ent[i][col].get())]))
            for i in range(6):
                if ent[row][i].get()!='':
                    check = list(set(check)-set([int(ent[row][i].get())]))
            if ent[4][3].get()!='':
                #print "43"
                check = list(set(check)-set([int(ent[4][3].get())]))
            if ent[4][4].get()!='':
                #print "44"
                check = list(set(check)-set([int(ent[4][4].get())]))
            if ent[4][5].get()!='':
                #print "45"
                check = list(set(check)-set([int(ent[4][5].get())]))
            if ent[5][3].get()!='':
                #print "53"
                check = list(set(check)-set([int(ent[5][3].get())]))
            if ent[5][4].get()!='':
                #print "54"
                check = list(set(check)-set([int(ent[5][4].get())]))
            if ent[5][5].get()!='':
                #print "55"
                check = list(set(check)-set([int(ent[5][5].get())]))
            #print value
            if value not in check:
                value = check[0]
            val[row][col].set(value)

        return




def checksudoku(ent):

    checkrow = [i for i in range(1,7)]
    checkcol = [i for i in range(1,7)]
    checksum = 0
    for i in range(6):
        for j in range(6):
            if (ent[i][j].get() == '') or  (int(ent[i][j].get()) not in range(1,7)) or (ent[j][i].get() == '') or  (int(ent[j][i].get()) not in range(1,7)):
                    #print "Invalid Input"
                    tkMessageBox.showerror(title="Error",message="Invalid Or Incomplete Input")
                    return
            else:
                checkrow = list(set(checkrow)-set([int(ent[i][j].get())]))
                checkcol = list(set(checkcol)-set([int(ent[j][i].get())]))
                checksum = checksum + int(ent[i][j].get())
        if checkrow:
            #print "1st row passed"
            tkMessageBox.showerror(title="Message",message="Unsuccessful Attempt")
            return
            #print "1st row not passed"
            #print checkrow
        if checkcol:
            tkMessageBox.showerror(title="Message",message="Unsuccessful Attempt")
            return
            #print "1st column not passed"
            #print checkcol
    tkMessageBox.showinfo(title="Success",message="Congratulations!! You Solved the sudoku")
    return






def reset1(ent,val,top,counter):
    #frame.quit()
    #frame = Frame(root,width=500, height=500, bg="", colormap="new")
    for i in range(6):
        for j in range(6):
            val[i][j].set('')
            ent[i][j].config(state=NORMAL)

    counter.pack_forget()
    counter = Label(top,fg='red')
    counter.grid(row=1)
    #start_counter(counter)
    start_counter(ent,val,top,counter)
    generatesudoku(ent,val)

    #start_counter(counter)






def insertsudoku(ent,val,row,col,value):
    #check = random.sample(range(1,7),6)
    check =[i for i in range(1,7)]
    for i in range(6):
        if ent[i][col].get()!='':
            check = list(set(check)-set([int(ent[i][col].get())]))
    for i in range(6):
        if ent[row][i].get()!='':
            check = list(set(check)-set([int(ent[row][i].get())]))
    if value not in check:
        value = check[0]
    val[row][col].set(value)








def generatesudoku(ent,val):


	col = random.sample(range(6),5)
	#row1 = random.randint(4,5)
        pos = range(0,35)
	row = random.sample(range(0,6),6)
	col = random.sample(range(0,6),6)
        su = random.randint(0,2)

        mysudoku1 = [[2,5,6,3,1,4],[3,1,4,6,5,2],[5,4,3,1,2,6],[1,6,2,4,3,5],[4,3,5,2,6,1],[6,2,1,5,4,3]]
        mysudoku2 = [[5,3,1,2,6,4],[2,4,6,1,5,3],[1,6,3,5,4,2],[4,5,2,3,1,6],[3,1,4,6,2,5],[2,6,5,4,3,1]]
        mysudoku3 = [[6,1,2,3,4,5],[5,3,4,6,2,1],[1,2,6,5,3,4],[4,5,3,2,1,6],[2,4,5,1,6,3],[3,6,1,4,5,2]]

        if su == 0:
            gen = mysudoku1
        elif su == 1:
            gen = mysudoku2
        else:
            gen = mysudoku3
        #print su

        for i in range(6):
            for j in range(6):
                val[i][j].set(gen[i][j])
                ent[i][j].config(state=DISABLED)
        for i in range(28):
	        loc=random.choice(pos)
	        #loc = 25
	        p=loc/6
	        q=loc%6
                val[p][q].set('')
                ent[p][q].config(state=NORMAL)







root = Tk()
w=350
h=250

ws = root.winfo_screenwidth()
hs = root.winfo_screenheight()

x = (ws/2) - (w/2)
y = (hs/2) - (h/2)
root.geometry('%dx%d+%d+%d' % (w,h,x,y))

root.title("M150128CS")

frame = Frame(root,width=500, height=500, bg="", colormap="new")

top =Frame(root)
top.pack(side=TOP)

label1 = Label(top,text="Sudoku Game By Sudhanshu Srivastava")
#var1 =
label1.grid(row=0)

val = [[StringVar() for i in range(6)] for i in range(6)]
ent = [[Entry(frame,width=5,bd=1) for i in range(6)] for i in range(6)]



for i in range(6):
	for j in range(6):
		ent[i][j].config(textvariable=val[i][j])

#ent = [[Entry(frame,width=3,textvariable=val[i][j]) for i in range(6)] for i in range(6)]

#count = 0
for i in range(6):
	for j in range(6):
		ent[i][j].grid(row=i,column=j)
		#count=count+1


#ent = startsudoku(root,frame)
generatesudoku(ent,val)
counter = Label(top,fg='red')
counter.grid(row=1)
start_counter(ent,val,top,counter)
"""
timevalue = IntVar()
show = Label(frame,text="Times Remaining")
timer1 = Entry(frame,textvariable=timevalue)
show.grid(row=1,column=8)
timer1.grid(row=3,column=8)
timevalue.set(300)
timer1.after(1, maketimer(timer1,timevalue))
"""


bottom = Frame(root)
bottom.pack(side=BOTTOM)
reset = Button(bottom,text="Reset",justify=LEFT, command=lambda: reset1(ent,val,top,counter))
reset.grid(row=0,column=0)
#reset.pack()
Submit = Button(bottom,text="Submit",justify=RIGHT,command=lambda: checksudoku(ent))
Submit.grid(row=0,column=4)

l = Label(frame)
l.grid(row=6)
l.grid(row=7)
l.grid(row=8)

#Submit.pack()
#reset.grid(row=6,column=0)
#ent[1][1].config(state=DISABLED)


"""givenrow = random.sample(range(1,7),4)
givencol = random.sample(range(1,7),4)
rowlab = [Label(frame,text=givenrow[i]) for i in range(4)]




#rowlab[0] = Label(frame,text=givenrow[0])
rowlab[0].grid(row =1, column=0)
rowlab[1].grid(row =3, column=0)
rowlab[2].grid(row =4, column=0)
rowlab[3].grid(row =5, column=0)
#var = StringVar()
r20 = Entry(frame,width=3)
r20.grid(row=2,column=0)

r60 = Entry(frame,width=3,text="4")
r60.grid(row=6,column=0)

collab = [Label(frame,text=givencol[i]) for i in range(4)]
collab[0].grid(row =2, column=2)
collab[1].grid(row =2, column=3)
collab[2].grid(row =2, column=4)
collab[3].grid(row =2, column=5)

r21 = Entry(frame,width=3)
r21.grid(row=2,column=1)
#b = Button(frame, text="set", command=setvalue)
#b.grid(row=2,column=0)

#b = Button(frame, text="get", command=getvalue)
#b.grid(row=6,column=1)"""

frame.pack()

root.mainloop()
