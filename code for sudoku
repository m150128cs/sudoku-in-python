# sudoku-in-python
This is GUI program for sudoku in python language.

__author__ = 'mtech1'


import sys
import math

#count = 0
#total = []
#final =[]

def updateadjacent(matrix,dist,spanset,i,v):
    #print
    #global dist
    for j in range(1,v+1):

        if(j!=i):

            if(matrix[i][j]!=0):

                if(spanset[j]==False):

                    if(dist[j]>=dist[i]+matrix[i][j]):
                        #print dist[j]
                        #print dist[i]+matrix[i][j]
                        dist[j] = dist[i]+matrix[i][j]
                        #print dist[j]




def findmin(dist,spanset,v):
    min = float('inf')
    index = -1
    for i in range(1,v+1):
        if((spanset[i]==False) and (dist[i]<=min)):
            min = dist[i]
            index = i
    return index

def dijkastra(matrix,start,v):
    final = []
    #count = 0
    dist = [float('inf') for i in range(0,v+1)]
    spanset = [False for i in range(0,v+1)]

    dist[start] = 0
    #spanset[start] = True
    #updateadjacent(matrix,dist,0,v)
    #a = findmin(dist,spanset,v)

    for i in range(1,v+1):

        a = findmin(dist,spanset,v)
        #print a,
        spanset[a] = True
        updateadjacent(matrix,dist,spanset,a,v)
        #a = findmin(dist,spanset,v)



    #spanset[0] = start
    for k in range(1,v+1):
        if(k!=start):
            if(math.isinf(dist[k])):
                dist[k]=-1
            final.append(dist[k])
    #total.append(final)
    #count= count+1
    return final
            #print dist[k],
    #print spanset
    #print matrix



total = []
count = 0
n = input()
#print "pas 1"

for k in range(n):

    ve =  map(int,sys.stdin.readline().split())

    v= int(ve[0])
    matrix = [[0 for i in range(v+1)] for i in range(v+1)]

    e=int(ve[1])


    for i in range(e):
        edge = map(int,sys.stdin.readline().split())
        #graph[i]=edge
        if(int(edge[2])<0):
            sys.exit("Dijkastra does not work for (-ve) weights")
        if(matrix[int(edge[0])][int(edge[1])]==0):
            matrix[int(edge[0])][int(edge[1])] = int(edge[2])
            matrix[int(edge[1])][int(edge[0])] = int(edge[2])
        elif(matrix[int(edge[0])][int(edge[1])] > int(edge[2])):
            matrix[int(edge[0])][int(edge[1])] = int(edge[2])
            matrix[int(edge[1])][int(edge[0])] = int(edge[2])
        #print int(edge[2])

    #print graph
    #print "Enter the start node "
    start = input()

    total.append(dijkastra(matrix,start,v))
    count+=1



t=0
while(t<count):
    for i in range(len(total[t])):
        print total[t][i],
    print ""
    t=t+1
